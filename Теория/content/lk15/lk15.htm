<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №15</title>
    <base target="_top">
</HEAD>
<BODY>
  <div class="title-1">
    Объектно- ориентированное программирование
</div>
<div class="content">

    <div class="title-2">
        Модуль. 
    </div>

<p>Модуль — функционально законченный фрагмент программы, оформленный в виде отдельного файла с исходным кодом или поименованной непрерывной её части (например, Active Oberon), предназначенный для использования в других программах. Модули позволяют разбивать сложные задачи на более мелкие в соответствии с принципом модульности. Обычно проектируются таким образом, чтобы предоставлять программистам удобную для многократного использования функциональность (интерфейс) в виде набора функций, классов, констант. Модули могут объединяться в пакеты и, далее, в библиотеки. Удобство использования модульной архитектуры заключается в возможности обновления (замены) модуля, без необходимости изменения остальной системы. В большинстве случаев различные модули могут запускаться как на одном сервере, так и на разных, для распределения нагрузки и создания распределенной архитектуры.</p>
<div class="title-2">
    Объект
</div>
<p>Объект – динамический модуль, у которого может быть много экземпляров. Описание динамического модуля – класс.
</p>
<p>public class List // динамический модуль
    {
    </p>
<p>public void RemoveAt(int index) { ... }
</p>
<p>public int GetCount() { ... }
</p>
<p>    public object GetItem(int index) { ... }
}
</p>
<p>public static class Helper // статический модуль
    {
    </p>
<p>public static void Test()
    {
</p>
<p>var list = new List(); // создание модуля
</p>
<p>list.Add("Андрей Ершов");
</p>
<p>list.Add("Niklaus Wirth");
</p>
<p>        Console.WriteLine("Count = {0}", list.GetCount());
}
</p>
<p>}
</p>
<div class="title-2">
    Класс
</div>
<p>Класс – тип данных для создания объектов:
</p>
<p>public class DelimitedReader
    {
    </p>
<p>public void Open(string fileName, char delimiter) { ... }
</p>
<p>public bool NextLine() { ... }
</p>
<p>public bool IsEndOfFile() { ... }
</p>
<p>public string[] Items;
</p>
<p>private string FileName;
</p>
<p>    private char Delimiter;
}
</p>
<div class="title-2">
    Интерфейс
</div>
<p>Общее определение: Интерфейс — это совокупность методов и правил взаимодействия элементов системы. Другими словами, интерфейс определяет как элементы будут взаимодействовать между собой.</p>
<p>Интерфейс двери — наличие ручки;</p>
<p>Интерфейс автомобиля — наличие руля, педалей, рычага коробки передач;</p>
<p>Интерфейс дискового телефона — трубка + дисковый набиратель номера.</p>
<p>Интерфейс определяет каким образом мы можем использовать объект</p>
<div class="title-2">
    Шаблон
</div>
<p>Шаблон проектирования или паттерн (англ. design pattern) в разработке программного обеспечения — повторяемая архитектурная конструкция, представляющая собой решение проблемы проектирования в рамках некоторого часто возникающего контекста.</p>
<p>Обычно шаблон не является законченным образцом, который может быть прямо преобразован в код; это лишь пример решения задачи, который можно использовать в различных ситуациях. Объектно-ориентированные шаблоны показывают отношения и взаимодействия между классами или объектами, без определения того, какие конечные классы или объекты приложения будут использоваться.</p>
<p>«Низкоуровневые» шаблоны, учитывающие специфику конкретного языка программирования, называются идиомами. Это хорошие решения проектирования, характерные для конкретного языка или программной платформы, и потому не универсальные</p>
<p>На наивысшем уровне существуют архитектурные шаблоны, они охватывают собой архитектуру всей программной системы.

    Алгоритмы по своей сути также являются шаблонами, но не проектирования, а вычисления, так как решают вычислительные задачи.</p>
    <div class="title-2">
        Java-аннотация
    </div>
<p>Java-аннотация — в языке Java специальная форма синтаксических метаданных, которая может быть добавлена в исходный код.</p>
<p>Аннотации используются для анализа кода, компиляции или выполнения. Аннотируемы пакеты, классы, методы, переменные и параметры</p>
<p>Выглядит как @ИмяАннотации, предваряющее определение переменной, параметра, метода, класса, пакета.</p>
<p>Аннотации, применяемые к исходному коду:</p>
<p>@Override - аннотация-маркер, которая может применяться только к методам. Метод, аннотированный как @Override, должен переопределять метод супер класса. @Override — проверяет, переопределён ли метод. Вызывает ошибку компиляции / интерпретации, если метод не найден в родительском классе или интерфейсе;</p>
<p>@Deprecated — отмечает, что метод устарел и не рекомендуется к использованию. Предполагается, что по каким-то причинам этот метод пока оставлен, но будет удалён в будущих версиях. Вызывает предупреждение компиляции, если метод используется;</p>
<p>@SuppressWarnings — указывает компилятору подавить предупреждения компиляции, определённые в параметрах аннотации;</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
</BODY>
</HTML>