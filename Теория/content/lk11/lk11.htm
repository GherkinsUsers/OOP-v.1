<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>

<HEAD>
    <LINK rel=stylesheet href="../../css/styles.css" type=text/css>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
    <META HTTP-EQUIV="Content-Language" CONTENT="ru">
    <title>Тема №11</title>
    <base target="_top">
</HEAD>

<BODY>
    <div class="title-1">
        Атрибут– метаданные
    </div>
    <div class="content">

        <p>Атрибуты – это метаданные, которые можно назначать элементам программы. Эти метаданные представляются как объекты,
            производные от класса Attribute.
        </p>
        <p>public class HelpAttribute : Attribute

        </p>
        <p>{</p>
        <p>public string Url { get; private set; }
        </p>
        <p>public string Topic { get; set; }
        </p>
        <p>public HelpAttribute(string url)
        </p>
        <p>{</p>
        <p>Url = url;
        </p>
        <p>}</p>
        <p>}
        </p>
        <p>Применение атрибута:
        </p>
        <p>[Help("http://company.com/help/Widget.htm")]
        </p>
        <p>public class Widget
        </p>
        <p>{
        </p>
        <p>[Help("http://company.com/help/WidgetDisplay.htm", Topic = "Display")]
        </p>
        <p>public void Display(string text) { ... }
        </p>
        <p>}
        </p>
        <p>С помощью механизма рефлексии для каждого элемента программы – класса, поля, свойства, метода, параметра – можно
            получить список атрибутов и воспользоваться данными атрибутов</p>
        <p>using System;
        </p>
        <p>using System.Reflection;
        </p>
        <p>using System.Diagnostics;
        </p>
        <p>public class Program {
        </p>
        <p> static void Main() {
        </p>
        <p> ShowHelp(typeof(Widget));
        </p>
        <p>ShowHelp(typeof(Widget).GetMethod("Display")); }
        </p>
        <p>static void ShowHelp(MemberInfo member) {
        </p>
        <p>HelpAttribute attr = Attribute.GetCustomAttribute(member,</p>
        <p>typeof(HelpAttribute)) as HelpAttribute;
        </p>
        <p>Process.Start(attr.Url); }
        </p>
        <p>}
        </p>
        <div class="title-2">
            Рефле?ксия
        </div>
        <p>
            Парадигмы программирования Императивная (контрастирует с декларативной) Процедурная Структурная Аспектно-ориентированная
            Объектно-ориентированная Агентно-ориентированная Компонентно-ориентированная Прототипно-ориентированная Обобщённое
            программирование Декларативная (контрастирует с императивной) Чистота языка Чистота функции Функциональная В
            терминах Рефал-машины Аппликативная Комбинаторная Бесточечная (чистая конкатенативная) Логическая Ограничениями
            Конкатенативная Векторная[en] Метапрограммирование Языково-ориентированная Предметно-ориентированная Пользователями[en]
            Автоматизация процесса программирования Рефлексивность Гомоиконность Связанные темы Программирование в крупном
            и мелком масштабе[en] Модульность Полиморфизм Продолжения и CPS Параллелизм и конкурентность Методы и алгоритмы
            Автоматное Потоков данных Событийно-ориентированное Реактивное Сервис-ориентированное п • о • р В информатике
            отражение или рефлексия (холоним интроспекции, англ. reflection) означает процесс, во время которого программа
            может отслеживать и модифицировать собственную структуру и поведение во время выполнения. Парадигма программирования,
            положенная в основу отражения, называется рефлексивным программированием. Это один из видов метапрограммирования[1].</p>
        <p>Во время выполнения программных инструкций (кода) компьютеры обрабатывают данные, что приводит к их изменению, при
            этом компьютеры не изменяют код. Однако, в большинстве современных компьютерных архитектур код хранится как данные,
            и в некоторых языках программирования реализована возможность обрабатывать собственный код как данные, что приводит
            к изменению уже самого кода во время его выполнения. Такие самоизменяющиеся программы в основном создаются с
            помощью высокоуровневых языков программирования, использующих виртуальные машины (например, Smalltalk, скриптовые
            языки). В меньшей степени рефлексия используется в языках с объявляемыми и/или статическими типами (например,
            Си, ML, Haskell, F#).</p>
        <p></p>
</BODY>

</HTML>